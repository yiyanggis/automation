# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# preparation.py
# Created on: 2015-02-10 11:13:23.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os, sys
import shutil

#select cbsa polygon
CBSACode="26900"

# Local variables:

rootDir="F:\\yiyang\\scripts\\"
templateMXD="template.mxd"
traceonLayersName="traceon.lyr"
originalLayersName="original.lyr"
completeLayersName="complete.lyr"
refLayersName="ref.lyr"

traceBaseMap="traceBaseMap.lyr"

destDir="F:\\yiyang\\scripts\\dest"+CBSACode+"\\"
outputTemplateMXD=destDir+templateMXD

def makeDir(path):
    if not os.path.exists(path):
        os.mkdir(path)
        print "create folder:"+path

def rmDir(path):
    if os.path.exists(path):
        shutil.rmtree(destDir)
        print "remove folder:"+path
        
#load map document
rmDir(destDir)
makeDir(destDir)

shutil.copy(rootDir+templateMXD, outputTemplateMXD)
print outputTemplateMXD

#mxd=arcpy.mapping.MapDocument(outputTemplateMXD)
mxd=arcpy.mapping.MapDocument("CURRENT")
print arcpy.mapping.ListDataFrames(mxd)

#create folders
#original, traceon, complete
completeDir=destDir+"complete\\"
traceonDir=destDir+"traceon\\"
originalDir=destDir+"original\\"
refDir=destDir+"ref\\"



makeDir(completeDir)
makeDir(traceonDir)
makeDir(originalDir)
makeDir(refDir)

#load group layers into map document
df=arcpy.mapping.ListDataFrames(mxd,"Layers")[0]
print df

traceonLayers=arcpy.mapping.Layer(rootDir+traceonLayersName)
originalLayers=arcpy.mapping.Layer(rootDir+originalLayersName)
completeLayers=arcpy.mapping.Layer(rootDir+completeLayersName)
refLayers=arcpy.mapping.Layer(rootDir+refLayersName)
traceBaseMapLayers=arcpy.mapping.Layer(rootDir+traceBaseMap)

arcpy.mapping.AddLayer(df,completeLayers,"BOTTOM")
arcpy.mapping.AddLayer(df,traceonLayers,"BOTTOM")
arcpy.mapping.AddLayer(df,traceBaseMapLayers,"BOTTOM")
arcpy.mapping.AddLayer(df,originalLayers,"BOTTOM")
arcpy.mapping.AddLayer(df,refLayers,"BOTTOM")

traceonGroup=arcpy.mapping.ListLayers(mxd,"traceon",df)[0]
completeGroup=arcpy.mapping.ListLayers(mxd,"complete",df)[0]
traceBaseMapGroup=arcpy.mapping.ListLayers(mxd,"traceBaseMap",df)[0]
originalGroup=arcpy.mapping.ListLayers(mxd,"original",df)[0]
refGroup=arcpy.mapping.ListLayers(mxd,"ref",df)[0]

#mxd.save()

groupLayer=arcpy.mapping.ListLayers(mxd,"Group",df)
print groupLayer

# Local variables:
FiberRoutes_shp = "F:\\yiyang\\GTCCloud\\GTCCloud\\GeoTelData_Master\\FiberRoutes\\2015_1_6FiberRoutes.shp"
orginalFiberRoutes_shp = originalDir+"originalFiberRoutes.shp"

CBSA_Boundaries = "F:\\yiyang\\GTCCloud\\DigitizeTools_MASTER\\GeoTelDigitizeSuite.gdb\\Boundaries\\CBSA_Boundaries"
CBSA_Boundaries_Select_shp = refDir+"CBSA_Boundaries.shp"

StreetFeatureSet=r"F:\yiyang\GTCCloud\DigitizeTools_MASTER\GeoTelDigitizeSuite.gdb\Streets\StRRMerge2013"



# Process: Select
arcpy.Select_analysis(CBSA_Boundaries, CBSA_Boundaries_Select_shp, "\"CBSA\" = '"+CBSACode+"'")
print "select cbsa:"+CBSACode
arcpy.AddMessage("select cbsa:"+CBSACode)

# Process: Clip
arcpy.Clip_analysis(FiberRoutes_shp, CBSA_Boundaries_Select_shp, orginalFiberRoutes_shp, "")
print "clip fiber routes"
arcpy.AddMessage("clip fiber routes")

#load fiber route to original
originalFiberRoutesLayer=arcpy.mapping.Layer(orginalFiberRoutes_shp)
arcpy.mapping.AddLayerToGroup(df,originalGroup,originalFiberRoutesLayer)

#load cbsa to ref
CBSA_Boundaries_Select=arcpy.mapping.Layer(CBSA_Boundaries_Select_shp)
arcpy.mapping.AddLayerToGroup(df,refGroup,CBSA_Boundaries_Select)

#load street
Streetlayer=arcpy.mapping.Layer(StreetFeatureSet)
arcpy.mapping.AddLayerToGroup(df,refGroup,Streetlayer)
#mxd.save()

#add

#split
fields=arcpy.ListFields(originalFiberRoutesLayer)
for field in fields:
        arcpy.AddMessage(field.name)

cursor=arcpy.SearchCursor(originalFiberRoutesLayer)

carriers={}

for row in cursor:
    carriers[row.getValue("CARRIER")]=row.getValue("CARRIER")
    #print(row.getValue("CARRIER"))


print carriers        


#split
#add to map
#set style
styles_lyr = "F:\\yiyang\\scripts\\styles.lyr"

for key in carriers:
    name=key.replace('&','_')
    name=name.replace('.','_')
    arcpy.AddMessage(name)
    carrylayer_shp=r"F:\yiyang\scripts\dest"+CBSACode+r"\original\originalFiberRoutes_"+name+".shp"
    arcpy.AddMessage(carrylayer_shp)
    arcpy.Select_analysis(originalFiberRoutesLayer, carrylayer_shp, "\"CARRIER\" = '"+key+"'")
    carrylayer=arcpy.mapping.Layer(carrylayer_shp)
    arcpy.mapping.AddLayerToGroup(df,traceBaseMapGroup,carrylayer)
    #arcpy.ApplySymbologyFromLayer_management("original\\originalFiberRoutes_"+name, styles_lyr)

arcpy.AddMessage("finish original layers")
arcpy.AddMessage("start traceon layers")

#intersect
Input_Features = StreetFeatureSet+" #;"+orginalFiberRoutes_shp+" #"
FiberOnRoad_shp = traceonDir+"FiberOnRoad.shp"

# Process: Intersect
arcpy.Intersect_analysis(Input_Features, FiberOnRoad_shp, "ALL", "", "INPUT")

#dissolve
FiberOnDe_shp=traceonDir+"FiberOnDe.shp"

# Process: Dissolve
arcpy.Dissolve_management(FiberOnRoad_shp, FiberOnDe_shp, "CARRIER", "", "SINGLE_PART", "DISSOLVE_LINES")

FiberOnDeLayer=arcpy.mapping.Layer(FiberOnDe_shp)
arcpy.mapping.AddLayerToGroup(df,traceonGroup,FiberOnDeLayer)

#split again
fields=arcpy.ListFields(FiberOnDeLayer)
for field in fields:
        arcpy.AddMessage(field.name)

cursor=arcpy.SearchCursor(FiberOnDeLayer)

carriers={}

for row in cursor:
    carriers[row.getValue("CARRIER")]=row.getValue("CARRIER")
    #print(row.getValue("CARRIER"))


print carriers   
#add to map
styles_lyr = "F:\\yiyang\\scripts\\styles.lyr"

for key in carriers:
    name=key.replace('&','_')
    name=name.replace('.','_')
    carrylayer_shp=r"F:\yiyang\scripts\dest"+CBSACode+r"\traceon\traceonFiberRoutes_"+name+".shp"
    arcpy.Select_analysis(FiberOnDeLayer, carrylayer_shp, "\"CARRIER\" = '"+key+"'")
    carrylayer=arcpy.mapping.Layer(carrylayer_shp)
    arcpy.mapping.AddLayerToGroup(df,traceonGroup,carrylayer)
    #arcpy.ApplySymbologyFromLayer_management("original\\originalFiberRoutes_"+name, styles_lyr)

arcpy.AddMessage("finish traceon layers")

